name: Semgrep Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
  schedule:
    # Run weekly scan on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  semgrep:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Semgrep scan
        run: |
          # Run semgrep using npm script (generates JSON output)
          npm run security || true
          
          # Also generate SARIF output for security tools
          docker run --rm -v "${PWD}:/src" returntocorp/semgrep semgrep \
            --config=p/security-audit \
            --config=p/secrets \
            --config=p/owasp-top-ten \
            --config=p/react \
            --config=p/typescript \
            --config=p/javascript \
            --config=.semgrep.yml \
            --sarif \
            --output=semgrep-results.sarif || true

      - name: Display scan results
        if: always()
        run: |
          echo "üîç Semgrep Security Scan Results:"
          echo "================================="
          if [ -f semgrep-results.json ]; then
            # Show summary
            total_findings=$(jq '.results | length' semgrep-results.json)
            echo "Total findings: $total_findings"
            echo ""
            
            # Show findings by severity
            if [ "$total_findings" -gt 0 ]; then
              echo "Findings by severity:"
              jq -r '.results | group_by(.extra.severity) | .[] | "\(.[0].extra.severity): \(length) findings"' semgrep-results.json
              echo ""
              
              echo "Details:"
              jq -r '.results[] | "‚ùå \(.extra.severity): \(.check_id) in \(.path):\(.start.line) - \(.extra.message)"' semgrep-results.json
            else
              echo "‚úÖ No security issues found!"
            fi
          else
            echo "‚ö†Ô∏è  No results file generated"
          fi

      - name: Check for critical/high severity findings
        if: always()
        run: |
          if [ -f semgrep-results.json ]; then
            # Count critical and high severity findings
            critical_count=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' semgrep-results.json)
            high_count=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' semgrep-results.json)
            
            echo "Critical/Error findings: $critical_count"
            echo "High/Warning findings: $high_count"
            
            # Fail if there are critical findings
            if [ "$critical_count" -gt 0 ]; then
              echo "‚ùå Build failed: $critical_count critical security findings must be addressed!"
              exit 1
            fi
            
            # Warn about high severity findings but don't fail
            if [ "$high_count" -gt 0 ]; then
              echo "‚ö†Ô∏è  Warning: $high_count high severity findings should be reviewed"
            fi
          fi

      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: |
            semgrep-results.sarif
            semgrep-results.json
          retention-days: 30